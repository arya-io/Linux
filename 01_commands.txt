Linux Notes

Basic Commands:
----------------
PATH:
`````
+ Absolute [ /home/natasha/Desktop ] 
+ Relative [ Desktop ]

pwd
- print working directory

cd
- Change Directory

cd path
cd .. [eg: cd ../../]

ls	[ List of dir contents ]
	# pwd
	/
	# ls /root/Desktop

whoami
- To show current logged in user name

mkdir dirname
- Make new directory

touch filename
- To create a blank file (A file without any content)

cat > filename
- To create a new file with text
	e.g: # cat > marvels
		TEXT
		[ctrl+d]-> save & exit

> [Standard output to the program]
< [Standard input to the program]

cat filename
- To show the text of file

cat >> file
- Append the text in existing file.
		e.g: # cat >> marvels
		TEXT2
		[ctrl+d]-> exit

date
- Display current date and time

clear
- To clear the screen/terminal OR ctrl+l

COPY:
-----
a) File to File:
----------------
	# cp srcFilename dstFilename
	OR
	# cp -fv srcFilename dstFilename
	[-f : Forcefully ]
	[-v : Verbose]View the process in detail.

b) File/Dir to Dir
------------------
	# cp -rfv srcFile/Dir dstDir 
[ -r : Recursive ]*
-f : forcefully
-v : verbose (to show process)

man cmd	[ Manual of command ]
	e.g: # man mkdir


REMOVE:
-------
a) A file:
----------
	# rm filename
	# rm -fv  filename
b) A dir:
---------
	# rm -rfv dirname

MOVE: [cut n paste ]
-----
# mv src dst
Move a file from source to destination

# mv oldname newname
This command is used to rename 'oldname' file.

# mkdir .dirname [Hidden Content]
# ls -a [ Show all content with hidden data]

whoami
Display current User name 

echo "msg" : Print the msg on terminal

# tty
- To display terminal name
/dev/pts/0

echo "LOL" > /dev/pts/1
- To display message from one terminal to another terminal

echo "Darlings" > kiki
- To store content directly in a file with echo command


alias:
[ command redirection ]
------
check current alias:

# alias

Create :

# alias money='whoami'

Remove:

# unalias money


Variables:

- User defined var
- System Defined var

a=8

echo "$a"
- 2
echo '$a'
- $a
echo "$a=$a"
- 2=2
echo "\$a=$a"
- $a=2

"" will be used to print the variable value
In interpolation, "" all meta characters are treated as metacharacters.

'' will be used to print the exact text.
In non-interpolation '', all meta characters are treated as string. 


env variable:
-------------
# env

# echo $HISTTIMEFORMAT

%d [Day]
%m [Month]
%y [Year]
%T [Time]

# export HISTTIMEFORMAT="%d-%m-%y %T "
- To add date and time in history command

------
# history
- To show commands history

history -d index_number
- Used to delete a specific indexed history

history -c
- Used to delete entire history

file filename
- Display type of file

mkdir directoryname{1..10}
- To create multiple directories

touch filename{1..10}
- To create multiple files

mkdir -p a/b/c/d
- To create directories from parent to child

`````````````````````````````````````````````````

## If you add a space before running any command, that command will not get stored in history.

`````````````````````````````````````````````````

rmdir directory
- To delete an empty directory

env
- To display environment variables

Find Data:
```````````
Syntax:
```````
# find <where_to_find> -<attrib> <what_to_find>
find /1 -name 2
- To find a particular file name in a particular folder

1) NAME
`````````
# find . -name natasha
# find . -iname natasha
- To display files those are case insensitive
# find /home/edbda/ -iname "*.png"
- To display files those are case insensitive with a particular extension

sort filename
- To sort the content present inside the file.

sort -u filename
- To sort the content present inside the file uniquely.

more filename
- To display content of file according to screensize. Then Percentage will appear on the screen. On pressing More (Enter), it will display more content.

wc filename
- Display lines, words and bytes of the filename along with the filename at the end

wc -l filename
- Displays line present in the file

wc -w filename
- Displays words present in the file

wc -c filename
- Displays bytes of the file

We can also use
wc -l -w -c filename

head -n number filename
OR head -number filename
- To display the specified number of top lines of a file

tail -n number filename
OF tail -number filename
- To display the specified number of bottom lines of a file

2) SIZE:
````````
k : KB
G : GB
M : MB

# find /home/edbda -size 2k
# find /home/edbda -size +2k
# find /home/edbda -size -2k
# find /home/edbda -size +2M -size -10M
- To display files according to their size in that range

3) TYPE:
````````
# find /home/edbda -type f
# find /home/edbda -type d
# find /home/edbda -type f -iname "abc"
- To display files according to their type

4) INDEX NUMBER:
`````````````````
# find /home/edbda -inum 45645456456
- To find out the index number of the files, use command: ls -i

| (pipe sign)
`````````````````

# cmd1 | cmd2
--o/p---->i/p
- Pass the output of one command as the input to the second command

# cat filename
# wc -l filename

# cat data | wc â€“l

````````````````````````````````````````````````````````````````````````````````````

adduser username
- Create user

id username
- Displays uid and gid of user

id -u username
- Displays user id of user

id -g username
- Displays group id of the user

su - username
- We can switch to another user present on Ubuntu

logout OR exit
- Take back to previous user.

passwd username
- to set the password for user

userdel username
- to delete a user without home directory

userdel -r username
-Used to delete a user account and remove associated files.

gpasswd groupname
- to set the password for group

grep groupname /etc/group
- to search for a specific group (groupname) in the /etc/group file on a Linux system. The /etc/group file contains information about groups and their members.

grep groupname /etc/gshadow
- to search for a specific group (groupname) in the /etc/gshadow file. The /etc/gshadow file contains secure group information, including group passwords, administrators, and members.

grepdel groupname
- delete a group

````````````````````````````````````````````````````````````````````````````````

ADVANCED USERS & GROUP MANAGEMENT:

useradd -u 2000 username
- Create a user with fixed (custom) UID.

usermod -u 2001 username
- Change the UID of an existing user

groupadd -g 9000 groupname
- Create a group with fixed (custom) GID.

groupmod -g 9001 groupname
- Modify the GID of an existing group.

useradd -c "COMMENT" username
- Create a user with comment

usermod -c "MODIFIED COMMENT" username
- Modify the comment for existing user

useradd -m -d /home/homeName username
- Create a user with custom Home Directory

mkdir /home/homeName
usermod -d /home/newhomeName username
- Modify the home directory for existing user

useradd -s /bin/nologin username
- Create a user with custom shell
Here, nologin is non-interactive shell

usermod -s /bin/bash username
- Modify a user with custom shell

To check: grep groupnameORusername /etc/passwd

`````````````````````````````````````````````````````````````````````````````````

grep : 
```````
To search text/string/pattern/regex inside a file

Syntax:
```````
# grep "string" filename
# grep "string1\|string2" filename
- The \| is used as an OR operator to search for either string1 or string2

inverse grep:
````````````
# grep -v "string1" filename
- to invert the match, meaning it returns all lines from the file that do not contain the specified pattern (string1)

# grep -i "s" data
- to search for string1 or string2 in a case-insensitive manner

Metachar
````````
^ : Start of line
$ : End of line

# grep -i "^s" data
# grep -i "s$" data

Only Match
```````````
# grep -o "string" filename

Before & After match
``````````````````````
# grep -B 1 "^i" data
- Displays lines that start with "i" in the file data, along with 1 line before each match.

# grep -A 1 "^i" data
- Displays lines that start with "i" in the file data, along with 1 line after each match.

# grep -A 1 -B 1 "^i" data
- Displays lines that start with "i" in the file data, along with 1 line before and 1 line after each match.

Pattern/Regex:
``````````````
[] : char class

[a-z] : Matches any lowercase letter from 'a' to 'z'.
[A-Z] : Matches any uppercase letter from 'A' to 'Z'.
[0-9] : Matches any digit from '0' to '9'.
[a-zA-Z0-9] : Matches any alphanumeric character (both lowercase and uppercase letters and digits).

Extended grep
`````````````
# grep -E 
OR
# egrep
- Using grep -E (or egrep) enables the use of extended regular expressions, 
which allow more powerful pattern matching. 
One of the features of extended regex is the use of {} for specifying ranges.

{} : Specifies the number or range of repetitions of the preceding pattern.

[] : char class
{} : range

grep -E "[a-z]{10}" filename or egrep "[a-z]{10}" filename
- [a-z]{10} : Matches exactly 10 lowercase letters in a row (e.g., abcdefghij).

grep -E "[a-z]{10,20}" filename
- [a-z]{10,20} : Matches a sequence of 10 to 20 lowercase letters (e.g., abcdefghij or abcdefghijklmnopqrst).

grep -E "[a-z]{10,}" filename
[a-z]{10,} : Matches at least 10 lowercase letters, with no upper limit (e.g., abcdefghijk, abcdefghijklmnop, etc.).

````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

VIM EDITOR:


update:
`````````
# apt update 
- Updates the package lists from repositories to get information on the latest versions of available packages, 
but does not install or upgrade any packages.

Upgrade:
````````
# apt upgrade
- Installs the newest versions of all installed packages that have available updates, without removing existing packages or installing new ones.

Install:
```````````
apt install package_name
- Installs the specified package (package_name) along with its dependencies.

Uninstall:
``````````
apt autoremove package_name
- Uninstalls the specified package (package_name) and automatically removes any unused dependencies that were installed with it.

````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

Command line mode commands:
````````````````````````````
i
- Take you to insert mode.

Esc
- Go back to command line mode.

G
- Take you to the end of the file.

yy
- Yank (copy) the current line; use `p` to paste below, `P` to paste above.

nyy
- Yank (copy) n number of lines.

p
- Paste the yanked or cut text below the cursor.

dd
- Cut the current line.

ndd
- Cut n number of lines.

u
- Undo the last change.

ctrl + r
- Redo the undone change.

```````````````````````````````````````````````````````````

Last line actions:
```````````````````
:set nu
- Show line numbers.

:set nonu
- Remove line numbers.

:line_number
- Take you to a specific line.

/word
- Search for a word; press `n` for the next occurrence, `N` for the previous.

:%s/old_word/new_word
- Search and replace the first occurrence of a word.

:%s/old_word/new_word/g
- Search and replace all occurrences of a word. Here 'g' is for global.

:wq
- Save and quit.

:w
- Save the file.

:q
- Quit the editor.

:w!
- Save forcefully.

:q!
- Quit forcefully without saving.

:wq!
- Save and quit forcefully.

````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

MEMBERSHIP
``````````````

Membership Types
-------------------------
|                      |
Primary            Secondary
|                      |
- Assigned when    - Additional group(s)
  user is created     user belongs to.
- User's login     - Doesn't affect 
  group.              login.
- Defined in       - Defined in 
  `/etc/passwd`.      `/etc/group`.

1. Create a user as a primary member of a group.

# groupadd groupname
- Create a new group with the name `groupname`.

# useradd -g groupname username
- Create a new user `username` and assign `groupname` as their primary group.

# id username
- Display the user's group memberships (both primary and secondary).

2. Create a user as a secondary member of a group

# groupadd groupname
- Create a new group with the name `groupname`.

# useradd -G groupname username
- Create a new user `username` and add them to `groupname` as a secondary group.

# id username
- Display the user's group memberships (both primary and secondary).

# useradd -G groupname -m -d /home/kids -s /bin/bash username

-G groupname: Adds the user to the specified secondary group (groupname).
-m: Creates a home directory for the user if it does not exist.
In this case, the home directory will be /home/kids as specified by -d.
-d /home/kids: Specifies the home directory for the user.
Instead of the default /home/username, the user's home directory will be set to /home/kids.
-s /bin/bash: Specifies the user's login shell as /bin/bash.

# cat /etc/group
- Displays the contents of the /etc/group file, which lists all system groups, their Group ID (GID), 
and the users that are members of each group (both primary and secondary members).

``````````````````````````````````````````````````````````````````````````````````````````````````````````

Basic Permissions: [ File based ]
------------------

ls -l
- List files and directories in long format, displaying permissions, ownership, size, and modification date.

ls -l filename
- Display detailed information (long format) about a specific file.

ls -ld directoryName
- Display detailed information (long format) about a specific directory/folder.

ls -R
- Recursively list all files and directories, including subdirectories and their contents.

1) Symbolic Method
===================
read	: r
write	: w
execute	: x
------------
user owner	: u
group owner	: g
Others		: o
All		: a
------------
Assign		: +
Remove		: -
Overwrite	: =
------------


Permission Area:
----------------
--- : user owner
--- : group owner
--- : Others

# ls -l
-rw-r--r-- 1 root root   43 Sep 23 01:56 file1


Default permissions for file (644): 
-----------------------------
read & write	: u
read		: g
read		: o

Default permissions for dir (755): 
----------------------------
read, write & execute	: u
read & execute		: g
read & execute		: o

Change permissions in Symbolic method:
---------------------------------------
# chmod u+rx file/dir
- Give the user (owner) read and execute permissions on the file/directory.

# chmod u-r,g+rw,o-rwx file/dir
- Remove read permission from the user, give the group read and write permissions, and remove all permissions for others.

# chmod u=rw file/dir
- Set the userâ€™s permissions to read and write only, removing any other permissions.

# chmod ugo=r file/dir
- Set read-only permissions for the user, group, and others.

# chmod a=r file/dir
- Set read-only permissions for all users (user, group, and others).

# chmod +x file/dir
- Add execute permission to all users (user, group, and others).

2) Numeric Method
-----------------

read	: 4
write	: 2
execute	: 1
Full	: 7
No	: 0

---	000	0
r--	100	4	
-w-	010	2
--x	001	1
rwx	111	7

# chmod 711 file/dir
- Set read, write, and execute permission for the user, and execute permission for group and others.

# chmod 111 dir -R
- Set execute-only permission for user, group, and others recursively on a directory and its contents.

umask
- To check the current `umask` value, which controls default file and directory permissions.

umask 0000
- To change the `umask` value to `0000`. Here, the first `0` represents special permissions.

Default Permission Calculation:
```````````````````````````````````

Default Permission for Directory: Calculated as 777 - umask.
- If umask is 0000, the default permission for a directory will be 777 (full read, write, and execute permissions for all).
Default Permission for File: Calculated as 666 - umask.
- If umask is 0000, the default permission for a file will be 666 (read and write permissions for all, but no execute permission).

Example:
- If umask is 0022:
  - Directory default permission: 777 - 022 = 755 (rwx for user, rx for group and others).
  - File default permission: 666 - 022 = 644 (rw for user, r for group and others).
The umask controls how permissions are masked when new files and directories are created.

`````````````````````````````````````````````````````````````````````````````````````````````````````````

# OWNERSHIP IN LINUX
````````````````````````

Every file and directory in Linux has an associated owner and group. 
Ownership determines who can access or modify the file.

- To check the current ownership of a file, use the following command:
ls -l filename
- Example:
ls -l myfile.txt
- Output:
-rw-r--r-- 1 john developers 1024 Mar 10 10:30 myfile.txt
- In this example, 'john' is the owner, and 'developers' is the group.

- To change the user ownership of a file, use the 'chown' command:
chown username filename
- Example:
chown john myfile.txt
- This command changes the ownership of 'myfile.txt' to the user 'john'.
- 'john' will now have permissions over the file according to the file's permission settings.

- To change the group ownership of a file, use the 'chgrp' command:
chgrp groupname filename
- Example:
chgrp developers myfile.txt
- This command changes the group ownership of 'myfile.txt' to 'developers'.

- You can also change both the user and group ownership of a file in a single command:
chown username:groupname filename
- Example:
chown john:developers myfile.txt
- In this case, 'john' becomes the owner and 'developers' is the group.

But what if you want to give ownership to someone in "others"?
In Linux, "others" refers to users who are neither the owner nor part of the group.
If a user from the "others" category needs ownership, you can follow these steps:

# Step 1: Change ownership to the user in "others":
chown username filename
- Example:
chown jane myfile.txt
# This removes 'jane' from the "others" category and makes her the owner of 'myfile.txt'.

# Step 2: If needed, add the user to a specific group using the 'usermod' command:
usermod -G groupname username
- Example:
usermod -G developers jane
- This command adds 'jane' to the 'developers' group.

# Step 3: Change the group ownership of the file to the appropriate group:
chgrp groupname filename
- Example:
chgrp developers myfile.txt
- This changes the group ownership of 'myfile.txt' to 'developers', where 'jane' is now a member.

RECURSIVE OWNERSHIP CHANGES

If you want to change the ownership of a directory and ALL its contents (files and subdirectories),
you need to use the '-R' option to apply the change recursively.

- To recursively change the user ownership of a directory and its contents:
chown -R username directoryname
- Example:
chown -R john /mydir
- This command changes the ownership of '/mydir' and all the files and subdirectories within to 'john'.

- To recursively change the group ownership of a directory and its contents:
chgrp -R groupname directoryname
- Example:
chgrp -R developers /mydir
- This command changes the group ownership of '/mydir' and all its contents to 'developers'.

- To change both the user and group ownership recursively:
chown -R username:groupname directoryname
- Example:
chown -R john:developers /mydir
- This changes both the user and group ownership of '/mydir' and all its contents to 'john' and 'developers'.

OTHER USEFUL OWNERSHIP COMMANDS

Sometimes, you might need to check which files are owned by a specific user or group.

- To find all files owned by a particular user, you can use the 'find' command:
find /path/to/search -user username
- Example:
find /home -user john
- This command finds all files under '/home' that are owned by 'john'.

- Similarly, you can search for files belonging to a specific group:
find /path/to/search -group groupname
- Example:
find /home -group developers
- This command finds all files under '/home' that belong to the 'developers' group.

`````````````````````````````````````````````````````````````````````````````````````````````````````````

ACCESS CONTROL LIST (ACL)

To apply ACL, we don't need to change basic permission OR
any ownership of a file or a folder/directory.

After the basic permission area, if you'll see '+' sign, it represents ACL is applied for file or folder/directory.

setfacl -m u:j1:rw file1.txt: Sets read and write permissions for user "j1" on "file1.txt".
setfacl -m g:groupname:rw file1.txt: Sets read and write permissions for the group "groupname" on "file1.txt".
getfacl filename: Displays the Access Control List (ACL) for the specified file "filename".

Process Management:

```````````````````
Process:
````````
- Any running program is a process
- Multiple instances of the same program are processes.
- Shell is also a process


Process ID (PID)
````````````````
- Each linux process is identified by unique id PID 
- Every process has a Parent Process ID (PPID)
	+ Except "init"

Create a Process:
`````````````````
Terminal#1
```````````
# sleep 100

Terminal#2
```````````
# ps -la		[ Show the processes with PID & PPID ]

Managing Processes:
````````````````````
- Linux kernel tracks what each process is doing
- Process is assigned a priority
- Address space assigned to the process
- Files is the process allowed to access
- Is the process a ?:-
	+ Parent
	+ Child
	+ Zombie

=> Sometimes the parent dies first
``````````````````````````````````
- If the parent just exits or dies, the child process is left running
- The child's PPID is no longer valid due to parent is gone.
- Linux calls these children processes "Zombies"
- In Linux a zombie is just a process in which the children are adopted by the "init" process
- The init process will eventually cleanup the zombie childrens

PPID[kill]
	\___________PID[kill]

PPID[die]
	\___________PID[zombie]

process manager: 
````````````````
ps, top, htop
``````````````
# top

press 'q' to exit


# sleep 10 &

# ps 		[ PID - Process ID]
# ps -l 	[ Show the PPID - Parent PID ]
# ps -e		[ All the processes ]

# ps -la

Kill:
-----
# kill PID
OR
# kill -9 PID

-9 : Forcefully

# pkill sleep

# killall sleep
--------------------


# sleep 10000 &
# sleep 20000 &




Check backgroup process:

# jobs
[1]-  Running                 sleep 10000 &
[2]+  Running                 sleep 20000 &

-  : Second last added in jobs
+  : last added in jobs

# jobs -l	[ with PID ]
[1]-   971 Running                 sleep 10000 &
[2]+   972 Running                 sleep 20000 &


# fg %2

ctrl+z [stop]

# bg %2 [ To start in BG ]
+++++++++++++++++++++++++++++++++++

Shell Scripting:
----------------To run multiple objects[binary/commands] using a single object[file].

.sh || .bash 

# vim runme.sh

#!/bin/bash	 [env declaration]SHEBANG
cmd1
cmd2
cmd3

:wq [Save & Quit]

# chmod u+x runme.sh
# ./runme.sh
OR
# bash runme.sh



==> Debug:
----------

# bash -x runme.sh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Variable:
---------
#!/bin/bash
target="example.com"
echo "My target for today is: $target"
echo "My target for today is: ${target}"

----------
#!/bin/bash
read -p "Enter the target: " target
echo "My target for today is: ${target}"
echo "My target for today is: ${target:-DEFAULT}"
-----------


#!/bin/bash
target=$(whoami)
echo "My user for today is: $target"
-----------
#!/bin/bash
target=`whoami`
echo "My user for today is: $target"
-----------


Arithmetic
~~~~~~~~~~~
x=10
y=2
echo $(($x + $y))
--------
read -p "Enter first: " x
read -p "Enter second: " y
echo $(($x + $y))
	--------
#!/bin/bash
expr 2 + 2
expr 2 - 2
expr 2 / 2
expr 2 \* 2

To run expr and echo together:

echo "The addition is: " $(expr $a + $b)
===============================
Conditions:
```````````
1) if...then...fi
2) if...then...else...fi
3) if...then...elif...then...fi
4) if...then...elif...then...else...fi


1) if...then...fi
````````````````````
#!/bin/bash
read -p "Enter: " a

if [[ $a == "0" ]];then
	echo "Ch mayla"
fi



2) if...then...else...fi
`````````````````````````
#!/bin/bash
read -p "Enter: " a

if [[ $a == "0" ]];then
	echo "Ch mayla"
else
	echo "Tumse na ho payega"
fi


3) if...then...elif...then...fi
`````````````````````````````````
#!/bin/bash
read -p "Enter: " a

if [[ $a == "0" ]];then
	echo "WoW"
elif [[ $a == "1" ]];then
	echo "Kidding"
fi

4) if...then...elif...then...else...fi
```````````````````````````````````````
#!/bin/bash
read -p "Enter: " a

if [[ $a == "0" ]];then
	echo "WoW"
elif [[ $a == "1" ]];then
	echo "Kidding"
else 
	echo "Don't take it lightly"
fi

1) Relational Operator:
```````````````````````
String comparisons: ==, !=, <, <=, >, >=, =~, !~
Numeric Comparisons: -eq, -ne, -lt, -le, -gt, -ge

[[ NUM == NUM ]]	Equal
[[ NUM != NUM ]]	Not Equal
[[ STRING -eq STRING ]]		Equal
[[ STRING -ne STRING ]]		Not equal
[[ STRING -lt STRING ]]		Less than
[[ STRING -le STRING ]]		Less than or equal
[[ STRING -gt STRING ]]		Greater than
[[ STRING -ge STRING ]]		Greater than or equal
[[ STRING =~ STRING ]]	Match RegEx
[[ STRING !~ STRING ]]	Not-Match RegEx

File Ops:
``````````
[[ -e FILE ]]	Exists
[[ -r FILE ]]	Readable
[[ -w FILE ]]	Writable
[[ -x FILE ]]	Executable
[[ -f FILE ]]	File
[[ -d FILE ]]	Directory
[[ -z STRING ]]	Empty string/var
[[ -n STRING ]]	Not empty string/var
[[ -s FILE ]] : File size not empty
[[ ! -s FILE ]] : File size empty

2) Logical Operators:
``````````````````````
||, &&, !

[[ $a == "0" ]] && [[ $b == "1" ]]

[[ $a == "0" ]] || [[ $b == "1" ]]

[[ ! -z $VAR ]] : Not Empty

-----------

1) if...then...fi
2) if...then...else...fi
3) if...then...elif...then...fi

#!/bin/bash
read -p "Enter value: " a
if [ $a == "1" ]
then
echo "It done"
fi

2) if...then...else...fi

#!/bin/bash
read -p "Enter value: " a
if [ $a == "1" ]
then
echo "It done"
else
echo "WTF"
fi

3) if...then...elif...then...fi

#!/bin/bash
read -p "Enter value: " a
if [ $a == "1" ]
then
echo "It done"
elif [ $a == "2" ]
then 
echo "Its FUN"
fi

4) if...then...elif...then...else...fi

#!/bin/bash
read -p "Enter value: " a
if [ $a == "1" ]
then
echo "It done"
elif [ $a == "2" ]
then
echo "Its FUN"
else
echo "WTF"
fi

while loop:
-----------

while true
do
echo "LOL"
done

# while true;do echo "LOL";done

redirect/stdin 
--------
# cat > file
Dheeraj
Tabish
Amruta
Mayur

# while read -r name; do echo "Name: $name";done < file

# cat file | while read -r name; do echo "Name: $name";done
----------------------------

TOOL:
-----

example.com		DOMAIN
admin.example.com	SUB DOMAIN

DNS

name - IP
IP - name
------


Target : yahoo.com


# vim subtool.sh
#!/bin/bash
target=$1
file=$2
while read -r sub; do
        if host "$sub.$target" &> /dev/null; then
                echo "$sub.$target"
        fi
done < $file

nested if:
----------

#!/bin/bash
file=$1

if [ -f "$file" ]; then
	if [ -w "$file" ]; then
		echo "Enter text:"
		cat >> $file
	else
		echo "Not writable"
	fi
else
	echo "$file not found"
fi

Functions:
----------


#!/bin/bash
target=$1
file=$2

brute(){
	while read -r sub; do
        if host "$sub.$target" &> /dev/null; then
                echo "$sub.$target"
        fi
	done < $file
}

if [ -f "$file" ]; then
	brute
else
	echo "$file not found"
fi
----------------------------------------------------------

CASE in BASH
------------

#!/bin/bash
f1(){
        echo "F1 is cool"
}
f2(){
        echo "F2 is awesome"
}
menu(){
        echo -e "1. Func 1\n2. Fun 2\n3. exit"
        read -p "Input> " a
}
menu
case $a in
        "1")
                f1
                ;;
        "2")
                f2
                ;;
        "3")
                exit
                ;;
        *)
                echo "Very Good Day"
                ;;
esac
```````````````````````````````````````````````````````````````````````````````````

IO STREAMS
-------------

We have three types of streams:
- stdin(file descriptor 0)
- stdout(file descriptor 1)
- stderr(file descriptor 2)

stdin
-------

cat > file
redhat
redhat

passwd nix < file
password set successfully

-------------------------------

stdout
-------

echo "LOL" > file
cat file

Standard Output Redirection (stdout):
echo "LOL" > /dev/null

- This command sends the output "LOL" to /dev/null, which effectively discards the output. /dev/null is a special device that discards everything written to it.

----------------------------------

stderr
-------

ppwwdd 2> /dev/null
- Here, ppwwdd is a non-existent command. The 2> redirects the error (standard error stream stderr) caused by this command to /dev/null, which suppresses the error message.

pwd 2> /dev/null
- The pwd command outputs the current working directory, but the 2> redirects any errors to /dev/null. Since pwd typically doesnâ€™t generate errors, the command will still display the output unless an error occurs.


To redirect output and error both:

pwd &> /dev/null
- This redirects both the output of the pwd command and any errors to /dev/null.

ppwwdd &> /dev/null
- Since ppwwdd is not a valid command, both the error and any potential output (if the command existed) would be redirected to /dev/null, effectively silencing both.

````````````````````````````````````````````````````````````````````````````
